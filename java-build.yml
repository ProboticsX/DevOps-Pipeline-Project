setup: 
  - sudo apt-get update -y
  - sudo apt-get install git wget -y
  - sudo apt-get install -qq -y debconf-utils
  - export DEBIAN_FRONTEND="noninteractive"  
  - sudo apt install jq -y 
  - sudo apt install nodejs -y
  - sudo apt install npm -y  
 
Variable:
  - DEBIAN_FRONTEND="noninteractive"

jobs:
  - name: java-build
    clone:
      - name: remove springbootwebapp if it already exists
        run: rm -rf springbootwebapp
      - name: clone springbootwebapp
        run: git clone https://github.com/springframeworkguru/springbootwebapp.git   
      - name: copy
        run: cp /bakerx/patch/springboot.patch ~/springbootwebapp/
      - name: Attach patch
        run: cd springbootwebapp && git apply springboot.patch
    steps: 
      - name: Install Maven
        run: sudo apt-get install maven -y
      - name: Set path
        run: export PATH=/opt/apache-maven-3.8.4/bin:$PATH
      - name: install JRE
        run: sudo apt-get install default-jre -y
      - name: install JDK
        run: sudo apt-get install openjdk-11-jdk -y     

  - name: mutation-coverage
    iterations: 2
    snapshots:
      - http://localhost:3000/survey/upload.md
      - http://localhost:3000/survey/long.md
      - http://localhost:3000/survey/survey.md
      - http://localhost:3000/survey/variations.md
    clone:
      - name: remove checkbox.io-micro-preview if it already exists
        run: rm -rf checkbox.io-micro-preview
      - name: remove screenshot if it already exists
        run: rm -rf screenshot
      - name: remove referenceSnaps if it already exists
        run:  rm -rf referenceSnaps
      - name: clone checkbox micro-preview
        run: git clone https://token@github.com/chrisparnin/checkbox.io-micro-preview
      - name: clone screenshot
        run: git clone https://token@github.com/ruttabega/screenshot
    send_files_to_vm:
      - name: copy screenshot.json
        run: cp /bakerx/screenshotDetails.json ~/screenshotDetails.json"
      - name: copy final.sh
        run: cp /bakerx/final.sh . 
      - name: replace in final.sh
        run:  sed -i 's/\\r//g' final.sh
      - name: copy screenshot.js
        run: cp -f /bakerx/screenshot.js  /home/vagrant/screenshot/screenshot.js
    steps:
      - name: Installations
        run: sudo apt-get install -y imagemagick chromium-browser
      - name: setup snapshot
        run: cd screenshot && npm i && sudo npm link
      - name: run service
        run: cd checkbox.io-micro-preview && npm install express && sudo npm install forever -g && sudo npm install escodegen && sudo npm install esprima && forever start index.js
      - name: Install libraries for snapshot utility
        run: sudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget -y
      - name: take screenshot of upload.md
        run: mkdir referenceSnaps && cd referenceSnaps && sudo apt-get install -y libgbm-dev && screenshot http://localhost:3000/survey/long.md ref_long && screenshot http://localhost:3000/survey/survey.md ref_survey && screenshot http://localhost:3000/survey/upload.md ref_upload && screenshot http://localhost:3000/survey/variations.md ref_variations
      - name: stop service
        run: cd checkbox.io-micro-preview && forever stop index.js
      - name: copy mutate.js
        run: cp /bakerx/mutate.js /home/vagrant/mutate.js && sudo npm install escodegen && sudo npm install esprima
      - name: Clean structure
        run: rm -rf /bakerx/mutation /home/vagrant/mutation
      - name: store mutation screenshots in the folders created 
        run: mkdir mutation && cd mutation && mkdir upload && mkdir long && mkdir survey && mkdir variations

  - name: test
    steps:
      - name: test springbootwebapp
        run: cd springbootwebapp && mvn clean test

  - name: code-coverage
    threshold: 0.1
    steps:
      - name: modify pom.xml
        run: sed -i 's/requiredCoverage/threshold/' ~/springbootwebapp/pom.xml
      - name: copy file to local
        run: cd springbootwebapp && mvn clean verify | tee ~/coverage-java.txt
      - name: copy bash file
        run: sed -i 's/<minimum>threshold/<minimum>requiredCoverage/' ~/springbootwebapp/pom.xml
      - name: copy file to local
        run: cp coverage-java.txt /bakerx/
      - name: copy bash file
        run: cp /bakerx/java_cov.sh ~
      - name: get coverage
        run: bash java_cov.sh threshold
      - name: Get test results
        run: cp java-code-coverage.json /bakerx/

  - name: java-deploy
    application_type: java
    deployment_file_path: springbootwebapp/target/spring-boot-web-0.0.1-SNAPSHOT.jar
    application_name: springbootwebapp
    end_point: springbootwebapp/login
    execute_permission:
      - name: permit web-srv
        run: chmod 600 web-srv
    vm_steps: 
      - name: copy web-srv
        run: cp /bakerx/web-srv .ssh/
      - name: permit web-srv in VM
        run: chmod 600 .ssh/web-srv
      - name: package application
        run: cd springbootwebapp && mvn package
      - name: install seige
        run: sudo apt install siege -y
    vm_to_droplet:
      - name: copy files to droplet
        run: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q -i ".ssh/web-srv " ~/project_path droplet_name@ip_address:~ 
    droplet_steps:
      - name: Update command
        run: sudo apt-get update
      - name: install JRE
        run: sudo apt install default-jre -y
      - name: install JDK
        run: sudo apt install openjdk-11-jdk -y
      - name: install Maven
        run: sudo apt install maven -y ; export PATH=/opt/apache-maven-3.6.3/bin:$PATH 
      - name: execute jar file
        run: java -jar spring-boot-web-0.0.1-SNAPSHOT.jar > output.txt 2>&1 &
    proxy_steps:
      - name: Run the proxy server
        run: pipeline serve
